pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = 'http://34.201.116.83:9000'
    DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "iam-veeramalla"
  }

  stages {
    stage('Checkout') {
      steps {
        echo '✅ Checkout Stage Started'
        // Simulate or uncomment when repo is set
        // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
        sh 'echo Git checkout simulated for demo'
      }
    }

    stage('Build and Test') {
      steps {
        echo '✅ Building Maven Project'
        sh 'mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      steps {
        echo '✅ Running SonarQube Analysis'
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh """
            mvn sonar:sonar \
              -Dsonar.login=${SONAR_AUTH_TOKEN} \
              -Dsonar.host.url=${SONAR_URL}
          """
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        echo '✅ Building and Pushing Docker Image'
        sh "docker build -t ${DOCKER_IMAGE} ."
        script {
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', REGISTRY_CREDENTIALS) {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        echo '✅ Updating Deployment Manifest and Committing to GitHub'
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          dir('spring-boot-app-manifests') {
            sh """
              git config user.email "abhishek.xyz@gmail.com"
              git config user.name "Abhishek Veeramalla"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
              git add deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            """
          }
        }
      }
    }
  }
}
